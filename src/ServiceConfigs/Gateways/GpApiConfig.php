<?php


namespace GlobalPayments\Api\ServiceConfigs\Gateways;


use GlobalPayments\Api\ConfiguredServices;
use GlobalPayments\Api\Entities\Enums\Environment;
use GlobalPayments\Api\Entities\Enums\GatewayProvider;
use GlobalPayments\Api\Entities\Enums\Secure3dVersion;
use GlobalPayments\Api\Entities\Enums\ServiceEndpoints;
use GlobalPayments\Api\Entities\Exceptions\ConfigurationException;
use GlobalPayments\Api\Gateways\GpApiConnector;
use GlobalPayments\Api\Utils\AccessTokenInfo;

class GpApiConfig extends GatewayConfig
{
    //GP-API
    private $appId;
    private $appKey;

    /**
     * @var $accessTokenInfo AccessTokenInfo
     */
    private $accessTokenInfo;
    /**
     * Country from which the transaction is done from
     * @var $country string
     */
    private $country = 'US';

    /**
     * Transaction channel for GP-API
     * Can be CP (Card Present) or CNP (Card Not Present)
     *
     * @var $channel string
     */
    private $channel;

    /**
     * The time left in seconds before the token expires
     * @var int
     */
    private $secondsToExpire;

    /**
     * The time interval set for when the token will expire
     */
    private $intervalToExpire;

    /**
     * @var string
     */
    private $methodNotificationUrl;

    /**
     * @var string
     */
    private $challengeNotificationUrl;

    public function __construct()
    {
        $this->gatewayProvider = GatewayProvider::GP_API;
    }

    public function configureContainer(ConfiguredServices $services)
    {
        // TODO: Implement configureContainer() method.
        if (empty($this->serviceUrl)) {
            $this->serviceUrl = ($this->environment == Environment::PRODUCTION) ?
                ServiceEndpoints::GP_API_PRODUCTION : ServiceEndpoints::GP_API_TEST;
        }
        $this->accessTokenInfo->initialize($this);
        $gateway = new GpApiConnector($this);
        $gateway->serviceUrl = $this->serviceUrl;

        if (isset($this->requestLogger)) {
            $gateway->requestLogger = $this->requestLogger;
        }

        $services->gatewayConnector = $gateway;

        $services->reportingService = $gateway;

        $services->setSecure3dProvider(Secure3dVersion::ONE, $gateway);
        $services->setSecure3dProvider(Secure3dVersion::TWO, $gateway);
    }

    public function validate()
    {
        parent::validate(); // TODO: Change the autogenerated stub
        if (empty($this->appId)) {
            throw new ConfigurationException('AppId is required for this configuration');
        }
        if (empty($this->appKey)) {
            throw new ConfigurationException('AppKey is required for this configuration');
        }
        if (empty($this->accessTokenInfo)) {
            throw new ConfigurationException(
                'An Access Token Info instance is required for this configuration'
            );
        }
    }

    public function getAppId()
    {
        return $this->appId;
    }

    public function getAppKey()
    {
        return $this->appKey;
    }
    public function getAccessTokenInfo()
    {
        return $this->accessTokenInfo;
    }

    public function getChannel()
    {
        return $this->channel;
    }

    public function getCountry()
    {
        return $this->country;
    }

    public function getSecondsToExpire()
    {
        return $this->secondsToExpire;
    }
    public function getIntervalToExpire()
    {
        return $this->intervalToExpire;
    }

    public function getChallengeNotificationUrl()
    {
        return $this->challengeNotificationUrl;
    }

    public function getMethodNotificationUrl()
    {
        return $this->methodNotificationUrl;
    }

    public function setAppId($appId)
    {
        $this->appId = $appId;
    }

    public function setAppKey($appKey)
    {
        $this->appKey = $appKey;
    }

    public function setAccessTokenInfo($accessTokenInfo)
    {
        $this->accessTokenInfo = $accessTokenInfo;
    }

    public function setChannel($channel)
    {
        $this->channel = $channel;
    }

    public function setCountry($country)
    {
        $this->country = $country;
    }

    public function setSecondsToExpire($value)
    {
        $this->secondsToExpire = $value;
    }

    public function setIntervalToExpire($value)
    {
        $this->intervalToExpire = $value;
    }

    public function setChallengeNotificationUrl($value)
    {
        $this->challengeNotificationUrl = $value;
    }

    public function setMethodNotificationUrl($value)
    {
        $this->methodNotificationUrl = $value;
    }
}